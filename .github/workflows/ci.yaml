name: Build and Test

on: push

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: 🔗 Install Dependencies
        run: npm ci

      - name: Test
        run: npm run test

      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --no-ci --debug --dry-run --plugins @semantic-release/commit-analyzer,@semantic-release/release-notes-generator --branches ${{ github.head_ref || github.ref_name }}

      - name: 🔬 Check semantic versioning
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          GITHUB_REF=${{ github.head_ref || github.ref_name }}
          npx semantic-release --no-ci --dry-run --plugins @semantic-release/commit-analyzer,@semantic-release/release-notes-generator --branches ${{ github.head_ref || github.ref_name }} > output.txt
          OUTPUT=$(cat output.txt | base64 -w 0)
          echo "::set-output name=releaseNote::$OUTPUT"

      - name: 📝 Report semantic versioning
        uses: actions/github-script@v7
        if: ${{ steps.semantic-release.outputs.releaseNote != '' }}
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
                // build release note
                const semanticReleaseOutput = Buffer.from('${{ steps.semantic-release.outputs.releaseNote }}', 'base64').toString('utf8');
                const semanticReleaseLogMatch = /^[[0-9:\sAMPM]+\]\s\[semantic-release\].*$/;
                const lines = semanticReleaseOutput.split('\n');
                const lastSemanticReleaseLogIndex = [...lines]
                    .reverse()
                    .findIndex((line) => line.match(semanticReleaseLogMatch));

                const releaseNoteIndex = lines.length - lastSemanticReleaseLogIndex;
                const releaseNote = lines.slice(releaseNoteIndex);

                let res = releaseNote.join('\n');
                if (!releaseNote.length || !res) {
                    res = '### No release note would be generated.';
                }

                const SEMANTIC_RELEASE_BODY_HEADER = '## 📝 Semantic Release Report';
                const body = [SEMANTIC_RELEASE_BODY_HEADER, res].join('\n');

                // get last comment
                const comments = await github.issues.listComments({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo
                });

                // find comments to delete
                const commentsToDelete = comments.data.filter((comment) =>
                    comment.body.startsWith(SEMANTIC_RELEASE_BODY_HEADER)
                );

                // delete comments
                const prms = commentsToDelete.map((comment) =>
                    github.issues.deleteComment({
                        comment_id: comment.id,
                        owner: context.repo.owner,
                        repo: context.repo.repo
                    })
                );

                await Promise.all(prms);

                // create new comment for release note
                github.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body
                });

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        if: '!cancelled()'
        with:
          token: ${{ secrets.NN_CODECOV_TOKEN }}
